// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	tmdb "github.com/cyruzin/golang-tmdb"
	mock "github.com/stretchr/testify/mock"
)

// TmdbClient is an autogenerated mock type for the TmdbClient type
type TmdbClient struct {
	mock.Mock
}

// GetDiscoverMovie provides a mock function with given fields: urlOptions
func (_m *TmdbClient) GetDiscoverMovie(urlOptions map[string]string) (*tmdb.DiscoverMovie, error) {
	ret := _m.Called(urlOptions)

	var r0 *tmdb.DiscoverMovie
	if rf, ok := ret.Get(0).(func(map[string]string) *tmdb.DiscoverMovie); ok {
		r0 = rf(urlOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmdb.DiscoverMovie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(urlOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGenreMovieList provides a mock function with given fields: urlOptions
func (_m *TmdbClient) GetGenreMovieList(urlOptions map[string]string) (*tmdb.GenreMovieList, error) {
	ret := _m.Called(urlOptions)

	var r0 *tmdb.GenreMovieList
	if rf, ok := ret.Get(0).(func(map[string]string) *tmdb.GenreMovieList); ok {
		r0 = rf(urlOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmdb.GenreMovieList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(urlOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovieDetails provides a mock function with given fields: id, urlOptions
func (_m *TmdbClient) GetMovieDetails(id int, urlOptions map[string]string) (*tmdb.MovieDetails, error) {
	ret := _m.Called(id, urlOptions)

	var r0 *tmdb.MovieDetails
	if rf, ok := ret.Get(0).(func(int, map[string]string) *tmdb.MovieDetails); ok {
		r0 = rf(id, urlOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmdb.MovieDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, map[string]string) error); ok {
		r1 = rf(id, urlOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
